// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "mysql"
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Persona {
  id              String    @id @default(uuid())
  nombre          String
  apellido        String
  telefono        String?
  direccion       String?
  fechaNacimiento DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relaciones
  usuario Usuario?
}

model Usuario {
  id              String     @id @default(uuid())
  personaId       String     @unique
  email           String     @unique
  passwordHash    String
  rol             RolUsuario
  emailVerificado Boolean    @default(false)
  activo          Boolean    @default(true)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relaciones
  persona         Persona          @relation(fields: [personaId], references: [id], onDelete: Cascade)
  empleado        Empleado?
  perfilCandidato PerfilCandidato?

  // Relaciones con ofertas
  ofertasAsignadas    OfertaLaboral[] @relation("OfertasAsignadas")
  ofertasPublicadas   OfertaLaboral[] @relation("OfertasPublicadas")
  ofertasAprobadas    OfertaLaboral[] @relation("OfertasAprobadas")
  ofertasActualizadas OfertaLaboral[] @relation("OfertasActualizadas")
}

model Empleado {
  id             String   @id @default(uuid())
  usuarioId      String   @unique
  departamentoId Int
  cargoId        Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relaciones
  usuario      Usuario      @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  departamento Departamento @relation(fields: [departamentoId], references: [id], onDelete: Restrict)
  cargo        Cargo        @relation(fields: [cargoId], references: [id], onDelete: Restrict)
}

model Departamento {
  id          Int      @id @default(autoincrement())
  descripcion String
  habilitado  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  empleados Empleado[]
}

model Cargo {
  id          Int      @id @default(autoincrement())
  descripcion String
  habilitado  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  empleados Empleado[]
}

model OfertaLaboral {
  id                    String      @id @default(uuid())
  puesto                String
  descripcionPuesto     String
  area                  String
  ubicacionPais         String
  ubicacionDepartamento String
  ubicacionCiudad       String
  empresa               String
  nivelAcademico        String
  experienciaLaboral    String
  tipoTrabajo           TipoTrabajo
  modalidad             Modalidad
  salario               Float

  reclutadorId     String?
  agregadoPorId    String
  actualizadoPorId String?
  aprobadoPorId    String?

  fechaCreacion      DateTime     @default(now())
  fechaActualizacion DateTime     @updatedAt
  estado             EstadoOferta @default(PENDIENTE)

  reclutador     Usuario? @relation("OfertasAsignadas", fields: [reclutadorId], references: [id])
  agregadoPor    Usuario  @relation("OfertasPublicadas", fields: [agregadoPorId], references: [id])
  actualizadoPor Usuario? @relation("OfertasActualizadas", fields: [actualizadoPorId], references: [id])
  aprobadoPor    Usuario? @relation("OfertasAprobadas", fields: [aprobadoPorId], references: [id])

  habilidades   OfertaHabilidad[]
  postulaciones Postulacion[]
}

model Habilidad {
  id        Int      @id @default(autoincrement())
  nombre    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ofertas  OfertaHabilidad[]
  perfiles PerfilCandidatoHabilidad[]
}

model OfertaHabilidad {
  id              Int    @id @default(autoincrement())
  ofertaLaboralId String
  habilidadId     Int

  ofertaLaboral OfertaLaboral @relation(fields: [ofertaLaboralId], references: [id], onDelete: Cascade)
  habilidad     Habilidad     @relation(fields: [habilidadId], references: [id], onDelete: Cascade)

  @@unique([ofertaLaboralId, habilidadId])
}

model PerfilCandidato {
  id        String @id @default(uuid())
  usuarioId String @unique

  // Datos profesionales del candidato
  resumen             String?
  tituloProfesional   String?
  experienciaTotal    Int? // años de experiencia total
  nivelAcademico      String?
  expectativaSalarial Float?
  disponibilidad      String? // ej. "INMEDIATA", "1 MES"
  movilidad           Boolean @default(false)

  // CV (archivo)
  cvUrl      String? // URL pública o ruta accesible
  cvKey      String? // S3 key o nombre de archivo local
  cvMimeType String?
  cvSize     Int?

  fechaActualizacion DateTime @updatedAt

  // Relaciones
  usuario Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  // Colecciones
  habilidades   PerfilCandidatoHabilidad[]
  educacion     Educacion[]
  experiencia   ExperienciaLaboral[]
  postulaciones Postulacion[]
}

model PerfilCandidatoHabilidad {
  id                String @id @default(uuid())
  perfilCandidatoId String
  habilidadId       Int

  perfilCandidato PerfilCandidato @relation(fields: [perfilCandidatoId], references: [id], onDelete: Cascade)
  habilidad       Habilidad       @relation(fields: [habilidadId], references: [id], onDelete: Cascade)

  @@unique([perfilCandidatoId, habilidadId])
}

model Educacion {
  id                String    @id @default(uuid())
  perfilCandidatoId String
  institucion       String
  titulo            String
  nivelAcademico    String
  fechaInicio       DateTime?
  fechaFin          DateTime?

  perfilCandidato PerfilCandidato @relation(fields: [perfilCandidatoId], references: [id], onDelete: Cascade)
}

model ExperienciaLaboral {
  id                    String    @id @default(uuid())
  perfilCandidatoId     String
  empresa               String
  puesto                String
  descripcion           String?
  fechaInicio           DateTime
  fechaFin              DateTime?
  actualmenteTrabajando Boolean   @default(false)

  perfilCandidato PerfilCandidato @relation(fields: [perfilCandidatoId], references: [id], onDelete: Cascade)

  @@index([perfilCandidatoId])
}

model Postulacion {
  id                String @id @default(uuid())
  ofertaLaboralId   String
  perfilCandidatoId String

  estado             EstadoPostulacion @default(SOLICITUD)
  // cartaPresentacion String? // texto opcional que escribe el candidato
  cvSnapshotUrl      String? // URL del CV al momento de postular (snapshot)
  cvSnapshotKey      String? // key/filename del snapshot (para borrar si reemplazas)
  // calificacion      Int? // puntuación interna (1-5, por ejemplo)
  notasInternas      String? // notas del reclutador
  fechaPostulacion   DateTime          @default(now())
  fechaActualizacion DateTime          @updatedAt

  // Relaciones
  oferta OfertaLaboral   @relation(fields: [ofertaLaboralId], references: [id], onDelete: Cascade)
  perfil PerfilCandidato @relation(fields: [perfilCandidatoId], references: [id], onDelete: Cascade)

  // Evita duplicados: un candidato no puede aplicar dos veces a la misma oferta
  @@unique([ofertaLaboralId, perfilCandidatoId])
  // Índices para consultas habituales
  @@index([ofertaLaboralId])
  @@index([perfilCandidatoId])
  @@index([estado])
}

enum RolUsuario {
  CANDIDATO
  RECLUTADOR
  ADMIN
}

enum TipoTrabajo {
  PERMANENTE
  TEMPORAL
}

enum Modalidad {
  PRESENCIAL
  REMOTO
  HIBRIDO
}

enum EstadoOferta {
  PENDIENTE
  ABIERTA
  RECHAZADA
  CERRADA
}

enum EstadoPostulacion {
  SOLICITUD
  ENTREVISTA
  EVALUACIONES
  CONTRATACION
  RECHAZADA
}
