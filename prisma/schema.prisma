// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "mysql"
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/**
 * ===========================
 * GEO: UBICACIONES (NUEVO)
 * ===========================
 */

model UbicacionDepartamento {
  id        Int      @id @default(autoincrement())
  nombre    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  ciudades UbicacionCiudad[]
  personas Persona[]
  ofertas  OfertaLaboral[]
  empresas Empresa[]

  @@unique([nombre])
}

model UbicacionCiudad {
  id             Int                   @id @default(autoincrement())
  nombre         String
  departamentoId Int
  departamento   UbicacionDepartamento @relation(fields: [departamentoId], references: [id], onDelete: Cascade)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  // Relaciones
  personas Persona[]
  ofertas  OfertaLaboral[]
  empresas Empresa[]

  @@unique([departamentoId, nombre]) // No repetir ciudad dentro del mismo departamento
}

// ===========================
// EMPRESAS
// ===========================
model Empresa {
  id                      String   @id @default(uuid())
  nombre                  String
  rtn                     String? // o NIF/RFC según país
  sitioWeb                String?
  telefono                String?
  descripcion             String?
  ubicacionDepartamentoId Int?
  ubicacionCiudadId       Int?
  activa                  Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relaciones
  ubicacionDepartamento UbicacionDepartamento? @relation(fields: [ubicacionDepartamentoId], references: [id], onDelete: SetNull)
  ubicacionCiudad       UbicacionCiudad?       @relation(fields: [ubicacionCiudadId], references: [id], onDelete: SetNull)

  usuarios      Usuario[] // reclutadores ligados a la empresa
  empleados     Empleado[] // si seguís usando "Empleado" como staff interno ligado a Empresa
  ofertas       OfertaLaboral[]
  suscripciones Suscripcion[]

  @@unique([nombre])
}

// ===========================
// PLANES Y SUSCRIPCIONES
// ===========================
model Plan {
  id                String   @id @default(uuid())
  nombre            String   @unique // "Gratis" | "Básico" | "Premium"
  descripcion       String?
  precioMensual     Float // en centavos (mejor práctica) o Float si querés
  duracionMeses     Int // 1 = mensual, 12 = anual, etc.
  maxOfertasActivas Int // límite de ofertas activas por empresa
  incluyeDestacado  Boolean  @default(false) // si permite marcar ofertas como destacadas
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  suscripciones Suscripcion[]
}

model Suscripcion {
  id          String    @id @default(uuid())
  empresaId   String
  planId      String
  fechaInicio DateTime  @default(now())
  fechaFin    DateTime
  activa      Boolean   @default(true)
  canceladaEn DateTime?

  empresa Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  plan    Plan    @relation(fields: [planId], references: [id], onDelete: Restrict)

  @@index([empresaId])
  @@index([planId])
}

/**
 * ===========================
 * PERSONAS / USUARIOS
 * ===========================
 */
model Persona {
  id                      String    @id @default(uuid())
  nombre                  String
  apellido                String
  telefono                String?
  direccion               String?
  fechaNacimiento         DateTime?
  genero                  Genero?
  ubicacionDepartamentoId Int?
  ubicacionCiudadId       Int?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  // Relaciones
  usuario               Usuario?
  ubicacionDepartamento UbicacionDepartamento? @relation(fields: [ubicacionDepartamentoId], references: [id], onDelete: SetNull)
  ubicacionCiudad       UbicacionCiudad?       @relation(fields: [ubicacionCiudadId], references: [id], onDelete: SetNull)
}

model Usuario {
  id              String     @id @default(uuid())
  personaId       String     @unique
  email           String     @unique
  passwordHash    String
  rol             RolUsuario
  emailVerificado Boolean    @default(false)
  activo          Boolean    @default(true)
  empresaId       String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relaciones
  persona         Persona          @relation(fields: [personaId], references: [id], onDelete: Cascade)
  empleado        Empleado?
  perfilCandidato PerfilCandidato?

  // Relaciones con ofertas
  ofertasAsignadas    OfertaLaboral[]  @relation("OfertasAsignadas")
  ofertasPublicadas   OfertaLaboral[]  @relation("OfertasPublicadas")
  ofertasAprobadas    OfertaLaboral[]  @relation("OfertasAprobadas")
  ofertasActualizadas OfertaLaboral[]  @relation("OfertasActualizadas")
  guardados           GuardadoOferta[]
  empresa             Empresa?         @relation(fields: [empresaId], references: [id], onDelete: SetNull)

  @@index([empresaId])
}

model Empleado {
  id             String   @id @default(uuid())
  usuarioId      String   @unique
  departamentoId Int
  cargoId        Int
  empresaId      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relaciones
  usuario      Usuario      @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  departamento Departamento @relation(fields: [departamentoId], references: [id], onDelete: Restrict)
  cargo        Cargo        @relation(fields: [cargoId], references: [id], onDelete: Restrict)
  empresa      Empresa?     @relation(fields: [empresaId], references: [id], onDelete: SetNull)

  @@index([empresaId])
}

model Departamento {
  id          Int      @id @default(autoincrement())
  descripcion String
  habilitado  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  empleados Empleado[]
}

model Cargo {
  id          Int      @id @default(autoincrement())
  descripcion String
  habilitado  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  empleados Empleado[]
}

/**
 * ===========================
 * OFERTA LABORAL
 * ===========================
 */
model OfertaLaboral {
  id                      String       @id @default(uuid())
  empresaId               String
  puesto                  String
  descripcionPuesto       String
  area                    String
  ubicacionDepartamentoId Int
  ubicacionCiudadId       Int
  nivelAcademico          String
  experienciaLaboral      String
  tipoTrabajo             TipoTrabajo
  modalidad               Modalidad
  salario                 Float
  reclutadorId            String?
  agregadoPorId           String
  actualizadoPorId        String?
  aprobadoPorId           String?
  fechaCreacion           DateTime     @default(now())
  fechaActualizacion      DateTime     @updatedAt
  estado                  EstadoOferta @default(PENDIENTE)
  destacada               Boolean      @default(false)

  empresa        Empresa? @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  reclutador     Usuario? @relation("OfertasAsignadas", fields: [reclutadorId], references: [id])
  agregadoPor    Usuario  @relation("OfertasPublicadas", fields: [agregadoPorId], references: [id])
  actualizadoPor Usuario? @relation("OfertasActualizadas", fields: [actualizadoPorId], references: [id])
  aprobadoPor    Usuario? @relation("OfertasAprobadas", fields: [aprobadoPorId], references: [id])

  habilidades           OfertaHabilidad[]
  postulaciones         Postulacion[]
  ubicacionDepartamento UbicacionDepartamento? @relation(fields: [ubicacionDepartamentoId], references: [id], onDelete: Restrict)
  ubicacionCiudad       UbicacionCiudad?       @relation(fields: [ubicacionCiudadId], references: [id], onDelete: Restrict)
  guardados             GuardadoOferta[]

  @@index([empresaId])
  @@index([ubicacionDepartamentoId])
  @@index([ubicacionCiudadId])
}

model GuardadoOferta {
  id              String   @id @default(uuid())
  userId          String
  ofertaLaboralId String
  createdAt       DateTime @default(now())

  usuario Usuario       @relation(fields: [userId], references: [id], onDelete: Cascade)
  oferta  OfertaLaboral @relation(fields: [ofertaLaboralId], references: [id], onDelete: Cascade)

  @@unique([userId, ofertaLaboralId], name: "user_offer_unique")
  @@index([userId])
  @@index([ofertaLaboralId])
}

/**
 * ===========================
 * HABILIDADES / PERFIL CANDIDATO
 * ===========================
 */
model Habilidad {
  id        Int      @id @default(autoincrement())
  nombre    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ofertas  OfertaHabilidad[]
  perfiles PerfilCandidatoHabilidad[]
}

model OfertaHabilidad {
  id              Int    @id @default(autoincrement())
  ofertaLaboralId String
  habilidadId     Int

  ofertaLaboral OfertaLaboral @relation(fields: [ofertaLaboralId], references: [id], onDelete: Cascade)
  habilidad     Habilidad     @relation(fields: [habilidadId], references: [id], onDelete: Cascade)

  @@unique([ofertaLaboralId, habilidadId])
}

model PerfilCandidato {
  id                   String   @id @default(uuid())
  usuarioId            String   @unique
  resumen              String?
  tituloProfesional    String?
  disponibilidad       String? // ej. "INMEDIATA", "1 MES"
  disponibilidadViajar Boolean  @default(false)
  cambioResidencia     Boolean  @default(false)
  poseeVehiculo        Boolean  @default(false)
  cvUrl                String? // URL pública o ruta accesible
  cvKey                String? // S3 key o nombre de archivo local
  cvMimeType           String?
  cvSize               Int?
  fechaCreacion        DateTime @default(now())
  fechaActualizacion   DateTime @updatedAt

  // Relaciones
  usuario Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  // Colecciones
  habilidades   PerfilCandidatoHabilidad[]
  educacion     Educacion[]
  experiencia   ExperienciaLaboral[]
  postulaciones Postulacion[]
}

model PerfilCandidatoHabilidad {
  id                String @id @default(uuid())
  perfilCandidatoId String
  habilidadId       Int

  perfilCandidato PerfilCandidato @relation(fields: [perfilCandidatoId], references: [id], onDelete: Cascade)
  habilidad       Habilidad       @relation(fields: [habilidadId], references: [id], onDelete: Cascade)

  @@unique([perfilCandidatoId, habilidadId])
}

model Educacion {
  id                String    @id @default(uuid())
  perfilCandidatoId String
  institucion       String
  titulo            String
  nivelAcademico    String
  fechaInicio       DateTime?
  fechaFin          DateTime?

  perfilCandidato PerfilCandidato @relation(fields: [perfilCandidatoId], references: [id], onDelete: Cascade)
}

model ExperienciaLaboral {
  id                    String    @id @default(uuid())
  perfilCandidatoId     String
  empresa               String
  puesto                String
  descripcion           String?
  fechaInicio           DateTime
  fechaFin              DateTime?
  actualmenteTrabajando Boolean   @default(false)

  perfilCandidato PerfilCandidato @relation(fields: [perfilCandidatoId], references: [id], onDelete: Cascade)

  @@index([perfilCandidatoId])
}

/**
 * ===========================
 * POSTULACIONES
 * ===========================
 */
model Postulacion {
  id                 String            @id @default(uuid())
  ofertaLaboralId    String
  perfilCandidatoId  String
  estado             EstadoPostulacion @default(SOLICITUD)
  cvSnapshotUrl      String? // URL del CV al momento de postular (snapshot)
  cvSnapshotKey      String? // key/filename del snapshot (para borrar si reemplazas)
  notasInternas      String? // notas del reclutador
  fechaPostulacion   DateTime          @default(now())
  fechaActualizacion DateTime          @updatedAt

  // Relaciones
  oferta OfertaLaboral   @relation(fields: [ofertaLaboralId], references: [id], onDelete: Cascade)
  perfil PerfilCandidato @relation(fields: [perfilCandidatoId], references: [id], onDelete: Cascade)

  // Evita duplicados: un candidato no puede aplicar dos veces a la misma oferta
  @@unique([ofertaLaboralId, perfilCandidatoId])
  // Índices para consultas habituales
  @@index([ofertaLaboralId])
  @@index([perfilCandidatoId])
  @@index([estado])
}

/**
 * ===========================
 * ENUMS
 * ===========================
 */
enum Genero {
  MASCULINO
  FEMENINO
}

enum RolUsuario {
  CANDIDATO
  RECLUTADOR
  ADMIN
  SUPERADMIN
}

enum TipoTrabajo {
  PERMANENTE
  TEMPORAL
}

enum Modalidad {
  PRESENCIAL
  REMOTO
  HIBRIDO
}

enum EstadoOferta {
  PENDIENTE
  ABIERTA
  RECHAZADA
  CERRADA
}

enum EstadoPostulacion {
  SOLICITUD
  ENTREVISTA
  EVALUACIONES
  CONTRATACION
  RECHAZADA
}
